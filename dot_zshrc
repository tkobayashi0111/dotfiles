### Added by Zinit's installer
if [[ ! -f $HOME/.zinit/bin/zinit.zsh ]]; then
    print -P "%F{33}▓▒░ %F{220}Installing %F{33}DHARMA%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
    command mkdir -p "$HOME/.zinit" && command chmod g-rwX "$HOME/.zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.zinit/bin" && \
        print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
        print -P "%F{160}▓▒░ The clone has failed.%f%b"
fi

source "$HOME/.zinit/bin/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zdharma-continuum/zinit-annex-rust \
    zdharma-continuum/zinit-annex-readurl \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-bin-gem-node

### End of Zinit's installer chunk

# ---------------------------------------------------------------------------- #
#                                 zinit plugins                                #
# ---------------------------------------------------------------------------- #
zinit light zsh-users/zsh-syntax-highlighting
zinit light zsh-users/zsh-autosuggestions
zinit light zsh-users/zsh-completions
# zsh-fzf-history-search
ZSH_FZF_HISTORY_SEARCH_EVENT_NUMBERS=0
ZSH_FZF_HISTORY_SEARCH_DATES_IN_SEARCH=0
zinit ice wait lucid
zinit light joshskidmore/zsh-fzf-history-search

# ---------------------------------------------------------------------------- #
#                                      env                                     #
# ---------------------------------------------------------------------------- #
export LANG=ja_JP.UTF-8

# homebrew
if [ -e /usr/local/bin/brew ]; then
    eval "$(/usr/local/bin/brew shellenv)"
elif [ -e /opt/homebrew/bin/brew ]; then
    eval "$(/opt/homebrew/bin/brew)"
elif [ -e /home/linuxbrew/.linuxbrew/bin/brew ]; then
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
elif [ -e ~/homebrew/bin/brew ]; then
    eval "$(~/homebrew/bin/brew shellenv)"
fi

# editor
if command -v nvim &> /dev/null; then
    export EDITOR=nvim
elif command -v vim &> /dev/null; then
    export EDITOR=vim
fi

# anyenv
if command -v anyenv &> /dev/null; then
    eval "$(anyenv init -)"
fi

# rust
if [ -e ~/.cargo/env ]; then
    source ~/.cargo/env
fi

# flutter
if [ -e ~/flutter/bin ]; then
    export PATH=$PATH:~/flutter/bin
fi

# JDK
if [ -e /usr/lib/jvm/java-11/openjdk-amd64 ]; then
    export JAVA_HOME=/usr/lib/jvm/java-11/openjdk-amd64
    export PATH=$PATH:$JAVA_HOME/bin
fi

# Android
if [ -e $HOME/Android/SDK ]; then
    export ANDROID_HOME=$HOME/Android/SDK
    export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin
    export PATH=$PATH:$ANDROID_HOME/platform-tools
fi

# ---------------------------------------------------------------------------- #
#                                  zsh config                                  #
# ---------------------------------------------------------------------------- #
# コマンド補完
autoload -Uz compinit && compinit

# ヒストリの設定
HISTFILE="${HOME}/.zsh_history"
HISTSIZE=1000000
SAVEHIST=1000000

# 補完で小文字でも大文字にマッチさせる
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# Ctrl+Dでzshを終了しない
setopt ignore_eof

# '#' 以降をコメントとして扱う
setopt interactive_comments

# 同時に起動したzshの間でヒストリを共有する
setopt share_history

# 同じコマンドをヒストリに残さない
setopt hist_ignore_all_dups

# スペースから始まるコマンド行はヒストリに残さない
setopt hist_ignore_space

# ヒストリに保存するときに余分なスペースを削除する
setopt hist_reduce_blanks

# 補完時にヒストリを自動的に展開
setopt hist_expand

# ---------------------------------------------------------------------------- #
#                                     alias                                    #
# ---------------------------------------------------------------------------- #
alias ls='ls --color=auto'
alias la='ls -al'

# pyenvが入っているときbrew doctorのwarning対策
# https://github.com/pyenv/pyenv/issues/106
if command -v pyenv &> /dev/null && command -v brew &> /dev/null; then
    alias brew='env PATH=${PATH//$(pyenv root)\/shims:/} brew'
fi

# ---------------------------------------------------------------------------- #
#                                    prompt                                    #
# ---------------------------------------------------------------------------- #
if [ "$TERM_PROGRAM" != "Apple_Terminal" ]; then
  eval "$(oh-my-posh init zsh)"
fi
